/* helper_functions.js - file for helper functions used in multiple areas of
   the program */

/* ****************************************************************************
   cookie helper functions
   based on W3C javascript cookie reference
   http://www.w3schools.com/js/js_cookies.asp */
function setCookie(name,value) {
  document.cookie = name+"="+value+"; path=/";
}
function getCookie(name) {
  name += "=";
  var ca = document.cookie.split(';');
  for(var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
    if (c.indexOf(name) === 0) return c.substring(name.length, c.length);
  }
  return null;
}



/* ****************************************************************************
   Helper function that, given a node, returns the node that is the first child
   matching a given tag. We tend to need this a lot. */
function firstChildWithTag(node, tagName) {
  return node.getElementsByTagName(tagName)[0];
}


/* ****************************************************************************
   Helper function to do the actual AJAX request. Takes a filename (same public
   XML document on the server) and a callback function which will get called
   with a single argument of the response text. 
   This will work with API documents, which should be on an root-relative path
   like "/api/v5/whatever.xml"
   Schedules get a JSON object. Using this will return it as text, which can
   then be parsed into JSON with JSON.parse().
   If this is being called in any "loader" function, make sure it's the last
   call in that function. Otherwise, any code after it can't assume that the
   code in the callback has finished.
*/
function doAjaxRequest(filename, callback) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (request.readyState == 4) {
      callback(request.response, request.status);
    }
  };
  request.open("GET", filename, true); 
  request.send();

} 


/* ****************************************************************************
   Helper function to clear the main div of any content and possibly put a
   loading indicator on the page. useLoadingMessage is optional.
*/
function clearForNewPage(useLoadingMessage) {
  if(useLoadingMessage === undefined)
    useLoadingMessage = true;
  // Using jQuery empty() is guaranteed to remove all event handlers that have
  // been applied to anything in the content. Without this, event handlers may
  // build up over time and slow down the page.
  $('div#content').empty();
  // Note when replacing this: check out the contents of the global
  // _eventhandlers array. 

  // add in some code to set the inner HTML of the content container to some
  // default "Loading..." message or whatever here
  if(useLoadingMessage) {
    var imgNode = document.createElement('img');
    imgNode.id='loading';
    imgNode.src="<%=asset_path('loading.gif')%>";
    nsYacs.contentContainer.appendChild(imgNode);
  }
}
