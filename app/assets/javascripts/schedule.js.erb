/* schedule.js - file for all processing, rendering, and events on the schedule
   page. */

/* ****************************************************************************
   Helper function to return the next multiple of 30 minutes
   If the given time is already a multiple of 30 minutes, return it. */
function next30Min(time) {
  if(time % 30 === 0) return time;
  return (time + 30 - (time % 30));
}


/* ****************************************************************************
   Helper function .......
   currently converts from miltime to number of minutes since midnight in
   addition to rounding to nearest 5 min, this may change (TODO) */
function roundTo5Min(milTime) {
  var min = Math.floor(milTime/100)*60 + (milTime % 100);
  return Math.round(min/5)*5;
}


/* ****************************************************************************
   Helper function to calculate the height in pixels of the difference between
   two times.
   Each minute is 0.8 pixels, plus 1 pixel for every 30-minute interval which
   is fully spanned by the given times (start is before it and end is after it.)
*/
function getHeight(startTime, endTime) {
  var timeDiff = endTime-startTime;
  var intervals = Math.floor((timeDiff)/30);
  var remainderTime = startTime+(intervals*30);
  var nextInterval = next30Min(remainderTime);
  if(nextInterval < endTime) {
    intervals++;
  }
  if(startTime % 30 === 0)
    intervals--; // exact 30min start/end times correction
  return ((timeDiff*4)/5) + intervals; 
}


/* ****************************************************************************
   Helper function to convert a numerical hours quantity into a string.
   Input is a int that represents a 24-hour hour.
   Used to generate the left side of the schedule table. */
function hourRepresentation(hour) {
  var ampm = (Math.floor(hour/12) % 2 ? 'PM' : 'AM');
  var newhour = hour % 12;
  if (newhour === 0) newhour = 12;
  return newhour + ' ' + ampm;
}

/* ****************************************************************************
   Given a period, return the text that should display in its schedule box.
   See issue #42 - this is a harder problem than it looks
   Current approach is to always include the same identifying string at the top,
   like "CSCI-1200-01 LEC". If there are more available lines, add in the
   course title.
*/
function getCourseText(period) {
  // One line of text per 30 minutes in the class.
  var lines = Math.floor((period.end-period.start)/30);
  var basetext = period.code + '-' + period.courseNum + '-' + period.sectNum
    + ' ' + period.type;
    
  if(lines < 2) {
    // one line of text, make it count
    return basetext;
  }
  else {
    // TODO: truncate string according to the number of lines that can be used
    return '<p>'+basetext+'</p>'+'<p>'+period.title;
  }
}


/* ****************************************************************************
   Function callbacks that activate when navigating between schedules. */
function movePrevSchedule() {
  if(nsUser.currentSchedule <= 0 ||
     nsUser.currentPage != nsYacs.schedulePage)
    return; // already at leftmost
  
  nsUser.currentSchedule--;
  
  $('div#scheduleTable').html(nsUser.schedHTMLData[nsUser.currentSchedule]);
  
  if(nsUser.currentSchedule === 0) {
    $('#leftswitch').addClass('disabled');
  }
  $('#rightswitch').removeClass('disabled');
  // change number of the schedule
  $('#schedNum').html(nsUser.currentSchedule + 1);
}
function moveNextSchedule() {
  if(nsUser.currentSchedule >= nsUser.schedHTMLData.length-1 ||
     nsUser.currentPage != nsYacs.schedulePage)
    return; // already at rightmost
  
  nsUser.currentSchedule++;
  
  $('div#scheduleTable').html(nsUser.schedHTMLData[nsUser.currentSchedule]);

  if(nsUser.currentSchedule === nsUser.schedHTMLData.length - 1) {
    $('#rightswitch').addClass('disabled');
  }
  $('#leftswitch').removeClass('disabled');
  $('#schedNum').html(nsUser.currentSchedule + 1);
}


/* ****************************************************************************
   Given a JSON object representing a single schedule from the API,
   transform it into an array of ordered arrays of periods.
   The larger array has 7 elements and represents the week. Each sub-array
   should be a list of all periods in that day, arranged by their start times.
*/
function convertSchedToPeriods(schedData) {
  var week = [];
  // days must be initialized separately so they don't all refer to the same
  week[0] = []; week[1] = []; week[2] = []; week[3] = []; week[4] = [];
  week[5] = []; week[6] = [];

  // identifies which course a period belongs to
  // (used to color all periods of a course the same color)
  var courseCtr = 1; 

  for (var s=0; s<schedData.sections.length; ++s) {
    var sect = schedData.sections[s];
    // assume the length of periods_start is the same as periods_end,
    // periods_type and periods_day. (else it's invalid)
    
    for (var i=0; i<sect.periods.length; ++i) {
      // the current period getting added into the structure
      var period = sect.periods[i]; 
      //period.prof = sect.instructors,
      // convert the times involved
      period.start     = roundTo5Min(period.start);
      period.end       = roundTo5Min(period.end);
      period.code      = sect.department_code;
      period.courseNum = sect.course_number;
      period.sectNum   = sect.name; // Should be a better term than "name"
	                            // but that's a problem with the API
      period.title     = sect.course_name;
      period.remaining = sect.seats_available;
      period.schedNum  = courseCtr;
      
      // use a crude insertion sort based on start time (data set is small)
      /* If the API promises to sort the periods (by day and then by start
	 time), we can get rid of this frontend sort and simply append each
	 period to the end of its day array:
	 week[period.day].push(period);
	 13 lines down to 1! :O
      */
      var inserted = false;
      for(var j=0; j<week[period.day].length; ++j) {
	if(week[period.day][j].start > period.start) {
	  // insert it into week[period.day] before the jth element
	  week[period.day].splice(j, 0, period);
	  inserted = true;
	  break;
	}
      }
      if(!inserted) {
	// period is later than anything else, or list is empty
	week[period.day].push(period);
      }
    }
    courseCtr++;
  }
  return week;
}


/* ****************************************************************************
   Given the array of arrays of periods returned from convertSchedToPeriods,
   convert it into a HTML string which will represent it as a schedule. */
function convertPeriodsToHTML(week) {
  // make sure week is valid
  if(week.length != 7) {
    return false;
  }
  
  // get earliest start/latest end for the week (both in days and hours)
  var earliestStart = 2359;
  var latestEnd = 0;
  var earliestDayWithPeriod = undefined;
  var latestDayWithPeriod;
  for(var i=0; i<7; ++i) {
    var thisDay = week[i]; // current array of periods (within one day)
    if(thisDay.length > 0) {

      if(earliestDayWithPeriod === undefined)
	earliestDayWithPeriod = i;

      if(thisDay[0].start < earliestStart)
	earliestStart = thisDay[0].start;
      
      if(thisDay[thisDay.length-1].end > latestEnd)
	latestEnd = thisDay[thisDay.length-1].end;

      latestDayWithPeriod = i;
    }
  }
  // always extend schedule to include all weekdays
  if(earliestDayWithPeriod > 1)
    earliestDayWithPeriod = 1;
  if(latestDayWithPeriod < 5)
    latestDayWithPeriod = 5;
  
  // extend them to nearest hours on either side
  // perhaps change this to half-hours later (TODO)
  earliestStart = 60 * Math.floor(earliestStart/60);
  latestEnd = 60 * Math.ceil(latestEnd/60);

  // generate column of hours
  var hourColumn = '<ul class="narrowcol"><li class="heading"></li>';
  for(var i = earliestStart; i < latestEnd; i+=30) {
    if(i % 60 === 0) {
      hourColumn += '<li>'+hourRepresentation(i/60)+'</li>';
    }
    else {
      hourColumn += '<li></li>';
    }
  }
  hourColumn += '</ul>';

  var weekHTML = hourColumn;
  for(var i=earliestDayWithPeriod; i<=latestDayWithPeriod; ++i) {
    
    var columnHTML = '<ul><li class="heading">'+nsYacs.weekdayNames[i]+'</li>';
    
    if(week[i].length === 0) {
      for(var j = earliestStart; j < latestEnd; j += 30) {
	columnHTML+='<li></li>';
      }
      columnHTML+='</ul>';
    }
    else {
      /* Strategy:
	 fill in empty <li>s before a period (adjust the height of the first one
	 if the difference between currTime and the next 30 minutes is less than
	 30 minutes) and increment currTime by 30 minutes until the difference
	 between currTime and the period start time is less than 30 minutes.
	 
	 Then, if this difference is nonzero, add a spacer li (which will have
	 no bottom border) with a custom height to fill the space until the
	 course begins.
	 If the difference is zero, do nothing (all space will have been filled
	 by the empty <li>s).
	 
	 Then, add the <li> for the course, with all its text (maybe broken up
	 with <p> tags TODO). This will have a course class defined by the
	 "course" field of the period and a custom height in pixels calculated
	 by the following:
	 (Total time in minutes)*0.8 +
	 (Number of multiples of 30 minutes spanned)
	 
	 If the period ends on a multiple of 30 minutes, add the "end30" class to
	 it, which will give it a bottom border.

	 Set currTime to this period's end time.
      */
      
      var currTime = earliestStart;
      for(var p=0; p<week[i].length; ++p) {
	var period = week[i][p];

	// step 1: fill in empty <li>s before period (these get bottom borders)
	if(period.start - currTime >= 30) {
	  // first one may be different
	  var nextInterval = next30Min(currTime);
	  if(currTime != nextInterval) {
	    columnHTML +=
	    '<li style="height:'+getHeight(currTime, nextInterval)+'px"></li>';
	    currTime = nextInterval;
	  }
	  for(; period.start - currTime >= 30; currTime += 30) {
	    columnHTML += '<li></li>';
	  }
	}

	// step 2: add a spacer li (no border) if there is still a time gap
	if(period.start - currTime > 0) {
	  columnHTML += '<li class="spacer" style="height:' +
	    getHeight(currTime, period.start) + 'px"></li>';
	}

	// step 3: add the actual course
	var classes = 'course c' + period.schedNum;
	var courseHeight = getHeight(period.start, period.end);
	if(period.endTime % 30 === 0) {
	  classes += ' end30';
	}
	if(period.remaining < 1) {
	  classes += ' closed';
	}
	columnHTML += '<li class="' + classes + '" style="height:' +
	  courseHeight + 'px">' + getCourseText(period) + '</li>';

	// step 4: set currTime
	currTime = period.end;
      }
      // add extra empty <li> after the last course until latestEnd
      // basically step 1 except with endTime instead of period.start
      if(latestEnd - currTime >= 30) {
	// first one may be different
	var nextInterval = next30Min(currTime);
	if(currTime != nextInterval) {
	  columnHTML +=
	  '<li style="height:'+getHeight(currTime, nextInterval)+'px"></li>';
	  currTime = nextInterval;
	}
	for(; latestEnd - currTime >= 30; currTime += 30) {
	  columnHTML += '<li></li>';
	}
      }
      // then, if there's any time left between currTime and latestEnd:
      if(latestEnd - currTime > 0) {
	// less than 30 minutes between currTime and latestEnd
	columnHTML +=
	'<li style="height:'+getHeight(currTime, latestEnd)+'px"></li>';
      }
    }

    columnHTML += '</ul>';
    weekHTML += columnHTML;
  }
  return weekHTML;
}


/* ****************************************************************************
   Function that will be called when the schedule page is loaded or when the
   list of selections changes (i.e. when it needs to regenerate the schedule
   and deselection list.)
   Will completely clear the content div and replace it with new schedules. */
function refreshSchedules() {
  
  // Construct the API request string that will be passed
  // expects a comma-delimited list of numeric section IDs
  var schedURL = "/api/v5/schedules.json?section_ids=" + nsUser.getSelectionsRaw();

  doAjaxRequest(schedURL, function(response) {

    // Constant DOM elements throughout this function
    var container = document.getElementById('scheduleContent');
    
    // Get the schedules as a JSON object
    var allSchedulesArray = (JSON.parse(response)).schedules;
    var numSchedules = allSchedulesArray.length;
    
    // Test for no schedules
    if(numSchedules === 0) {
      // TODO: when stuff gets moved, have it be a function that returns the
      // schedule innerHTML instead
      container.innerHTML = '<div class="error">No schedules are available for this selection of courses.</div>';
      return;
    }
    
    // Store the data in nsUser
    nsUser.schedHTMLData = [];
    for(var i=0; i<numSchedules; ++i) {
      nsUser.schedHTMLData[i] =
	convertPeriodsToHTML(convertSchedToPeriods(allSchedulesArray[i]));
    }
    nsUser.currentSchedule = 0;
    
    var disableSecond = (numSchedules === 1);
    var schedBar = '<div id="schedulebar"><span id="leftswitch" class="scheduleswitch disabled" onclick="movePrevSchedule()">&#9664;</span>Schedule <span id="schedNum">1</span> / ' +
      numSchedules +
      '<span id="rightswitch" class="scheduleswitch' +
      (numSchedules === 1 ? ' disabled' : '') +
      '" onclick="moveNextSchedule()">&#9654;</span></div>';

    container.innerHTML = schedBar + '<div id="scheduleTable">' + nsUser.schedHTMLData[0] + '</div>';
  });
}



/* ****************************************************************************
   Schedule loading function
   Takes the selected courses from the cookie and passes them to the schedule
   API. Using the JSON data it receives, convert each schedule to periods
   and then to HTML, store those HTML schedules in nsUser, and load the first
   one into the DOM.
*/
function loadSchedules() {
  selectionsRaw = nsUser.getSelectionsRaw();
  // If nothing is selected, take no action
  // We could make it show "No courses selected" or whatever but I don't think
  // that's really necessary
  if (selectionsRaw.length < 1) return;

  clearForNewPage();

  // Create the two subcontainer divs
  nsYacs.contentContainer.innerHTML = '<div id="scheduleContent"></div><div id="deselectContent"></div>';

  // Generate the actual schedules and populate div#scheduleContent with them
  refreshSchedules();
 
  // Now make a second AJAX request for the details of selected sections
  var sectURL = '/api/v5/sections.xml?id=' + nsUser.getSelectionsRaw();
  doAjaxRequest(sectURL, function(response) {
    // TODO: Consider making a separate function for this code
    
    // insert sections into DOM
    nsYacs.contentContainer.innerHTML += response;
    
    // give it an id to make the CSS rules more straightforward
    var sectionsContainer =
      firstChildWithTag(nsYacs.contentContainer, 'sections');
    sectionsContainer.setAttribute('id', 'deselection');

    // add event listeners
    var sections = sectionsContainer.getElementsByTagName('section');
    for(var i=0; i<sections.length; ++i) {
      var sect = sections[i];
      var sectID = firstChildWithTag(sect, 'section-id').innerHTML;
      
      // all event listeners in loops need closures
      sect.addEventListener('click', function(theSection, theSID) {
	
	// sorry about poor variable naming but I'm juggling too many sects,
	// sids, sections, sectionIDs, etc. to keep track
	return function() {
	  // test whether this is already deselected or not
	  if(theSection.className.indexOf('deselected') <= -1) {
	    // it is not deselected already, so deselect it
	    nsUser.removeSelection(theSID);
	    theSection.className += ' deselected';
	    refreshSchedules();
	  }
	  else {
	    // it is deselected and user clicked again, re-add to selections
	    nsUser.addSelection(theSID);
	    theSection.classList.remove('deselected');
	    refreshSchedules();
	  }
	}
      }(sect, sectID));
    }
  });
  
  nsUser.currentPage = nsYacs.schedulePage;
  History.pushState({state:nsYacs.schedulePage}, "Schedule page", "?state=2");
}