/* courselist.js - file for all processing, rendering, and events on the course
   list page. */

/* ****************************************************************************
   Helper function to convert a military time into a hh:mm representation. Does
   not currently use AM or PM.
   Used in parsing period times when loading courses. */
function milTimeToReadable(miltime) {
  var hour = Math.floor(miltime/100);
  if(hour > 12) {
    hour -= 12;
  }
  if(hour == 0) {
    hour = 12;
  }
  var minute = miltime % 100;
  if (minute < 10) minute = '0'+minute;
  return hour + ':' + minute;
}


/* ****************************************************************************
   Format the sections as they appear in the course list into their final
   display. Argument is a single DOM node containing <section> elements from
   the API.
*/
function formatSections(parentNode) {
  /* These loops are all poorly readable. If anyone is ever maintaining this
     code when for..of loops become cross-browser compatible, please go
     through all of the YACS Javascript to replace things like
     for(var n=0; n<nodes.length; ++n) {
       var node = nodes[n];
       ...
     }
     with loops like
     for(var node of nodes) {
       ...
     }
  */
  
  // get list of section nodes
  var nodes = parentNode.getElementsByTagName('section');
  
  // add "closed" class to sections with less than 1 seat
  for(var n=0; n<nodes.length; ++n) {
    var ssa = firstChildWithTag(nodes[n], 'section-seats-available');
    // there should only be 1 <section-seats-available> child
    if(parseInt(ssa.innerHTML, 10) < 1) {
      nodes[n].classList.add('closed');
    }
    
    // mark any sections that are already in the selected array with .selected
    // class (used in revisiting pages)
    var sid = firstChildWithTag(nodes[n], 'section-id').innerHTML;
    if(nsUser.hasSelection(sid)) {
      nodes[n].className += ' selected';
    }
  }

  // prepend the "Section" to section numbers
  nodes = parentNode.getElementsByTagName('section-name');
  for(var n=0; n<nodes.length; ++n) {
    nodes[n].innerHTML = 'Section ' + nodes[n].innerHTML;
  }

  // append the " seats" to the available seats
  nodes = parentNode.getElementsByTagName('section-seats-available');
  for(var n=0; n<nodes.length; ++n) {
    nodes[n].innerHTML += ' seats';
  }

  // period formatting
  // first check for no periods
  nodes = parentNode.getElementsByTagName('periods');
  for(var n=0; n<nodes.length; ++n) {
    var subnodes = nodes[n].getElementsByTagName('period');
    if(subnodes.length === 0) {
      nodes[n].className += ' noperiods';
      nodes[n].innerHTML = 'No periods';
    }
    else {
      // for each period object, the period-start and period-end children are
      // represented in military time, so replace them with a period-time
      // element
      // that formats them together as readable times
      for(var s=0; s<subnodes.length; ++s) {
	var ps = firstChildWithTag(subnodes[s], 'period-start');
	var pe = firstChildWithTag(subnodes[s], 'period-end');
	var startTime = milTimeToReadable(ps.innerHTML);
	var endTime = milTimeToReadable(pe.innerHTML);
	var pt = document.createElement('period-time');
	pt.innerHTML = startTime + '-' + endTime;
	ps.parentNode.insertBefore(pt, ps);
	ps.parentNode.removeChild(ps);
	pe.parentNode.removeChild(pe);

	// period-day is represented as a number; translate it into a short day
	// code
	var days = subnodes[s].getElementsByTagName('period-day');
	for(var d=0; d<days.length; ++d) {
	  days[d].innerHTML = nsYacs.weekdayNames[parseInt(days[d].innerHTML,10)].substring(0,3);
	}
      }
    }
  }
  
}


/* ****************************************************************************
   Format the courses and sections which appear on the search results page into
   their final display. The API does not load text like "credits" or "Section";
   the frontend is responsible for this process.
*/
function formatCourseList() {

  // add the actual "credit(s)" to credits elements, which only have the number
  var nodes = document.getElementsByTagName('course-credits');
  for(var n=0; n<nodes.length; ++n) {
    var word = 'credits';
    if(parseInt(nodes[n].innerHTML, 10) === 1) { word = 'credit'; }
    nodes[n].innerHTML = nodes[n].innerHTML + ' ' + word;
  }

  formatSections(document);
}
  

/* ****************************************************************************
   Once a courses XML has been loaded into div#content, do any other steps
   needed to crunch it into presentable form. */
function setupCourses() {

  // check for no courses (expected result from a search query that matches
  // nothing)
  if(nsYacs.contentContainer.getElementsByTagName('course').length === 0) {
    nsYacs.contentContainer.innerHTML = '<div class="error">No courses match those search terms.</div>';
    return;
  }
  
  formatCourseList();

  // add section click event handler
  var nodes = document.getElementsByTagName('section');
  for(var i=0; i<nodes.length; ++i) {
    /* Note to future maintainers:
       all of the closures in the code ought to be replaced by using the let
       keyword instead of var. Example for this code:
       let n = nodes[i];
       let sid = firstChildWithTag(n, 'section-id').innerHTML;
       Then you can bind the click event handler normally using n and sid
       without any need for a closure. Sadly, the EcmaScript draft enabling the
       use of let is STILL not cross-platform (no Safari support, limited
       Chromium support) after being out there for over 6 years.
    */
    var n = nodes[i];
    var sid = firstChildWithTag(n, 'section-id').innerHTML;

    // add click functionality to sections
    // stupid, stupid cross-browser closures
    (function() {
      var theSection = n;
      var theSID = sid;
      theSection.addEventListener('click', function(event) {
	
	// we care more about the data - so use that to determine how to
	// change the styling; i.e. if the id is in the array, we will
	// always deselect it regardless of whether it was being rendered
	// as selected or not
	if(nsUser.removeSelection(theSID)) {
	  // index is real, section is selected, remove selected class
	  theSection.classList.remove('selected');
	}
	else {
	  // section is not selected, select it and add it to the array
	  nsUser.addSelection(theSID);
	  theSection.className += ' selected';
	}
	
	// don't bubble up to the course click handler!
	event.stopPropagation();
      });
    })()

  }
  
  // courses can also be clicked
  // if a course is clicked:
  // if there are open, non-selected sections: select all open sections
  // else: deselect all selections

  nodes = document.getElementsByTagName('course');
  for(var i=0; i<nodes.length; ++i) {
    var theCourse = nodes[i];

    // another closure here
    (function() {
      var c = theCourse;
      c.addEventListener('click', function(event) {

	// first loop over all sections to determine if all open sections are
	// selected
	var allSelected = true;
	var selections = nsUser.getSelections();
	var sections = c.getElementsByTagName('section');
	for(var j = 0; j<sections.length; ++j) {
	  var s = sections[j];
	  // ignore closed sections
	  if(s.className.indexOf('closed') < 0) {
	    var sid = firstChildWithTag(s, 'section-id').innerHTML;
	    // if a section id cannot be found in the selected array, they
	    // cannot all be selected
	    if(selections.indexOf(sid) < 0) {
	      allSelected = false;
	      break;
	    }
	  }
	}

	// select open sections
	for(var j=0; j<sections.length; ++j) {
	  var s = sections[j];
	  var sid = firstChildWithTag(s, 'section-id').innerHTML;
	  if(allSelected) {
	    // removal functions won't do anything if not selected
	    nsUser.removeSelection(sid);
	    s.classList.remove('selected');
	  }
	  else {
	    // never add closed sections
	    if(s.className.indexOf('closed') < 0) {
	    // addSelection doesn't add to the cookie if it's already selected
	      nsUser.addSelection(sid);
	      s.className += ' selected';
	    }
	  }
	}
	
      });
    })()
  }
  
  //History.pushState({state:nsYacs.courselistPage}, "Course page", "?state=1");
}



/* ****************************************************************************
   Main courses load function, that will be called when navigating to this page.
   Anything that has to be done when loading up the courses/search results.
   The string argument is the literal API request that will be made, unchanged.
*/
function loadCourses(apiString) {
  clearForNewPage();
  doAjaxRequest(apiString, function(response) {
    nsYacs.contentContainer.innerHTML = response;
    setupCourses();
    nsUser.currentPage = nsYacs.courselistPage;
  });
}
