/* courselist.js - file for all processing, rendering, and events on the course
   list page. */

/* ****************************************************************************
   Helper function to convert a military time into a hh:mm representation. Does
   not currently use AM or PM.
   Used in parsing period times when loading courses. */
function milTimeToReadable(miltime) {
  var hour = Math.floor(miltime/100);
  if(hour > 12) {
    hour -= 12;
  }
  if(hour == 0) {
    hour = 12;
  }
  var minute = miltime % 100;
  if (minute < 10) minute = '0'+minute;
  return hour + ':' + minute;
}


/* ****************************************************************************
   Format some items which appear on the search results page into their final
   display. The API does not load text like "credits" or "Section"; the
   application is responsible for this process.
*/
function formatSearchResults() {
  /* These loops are all poorly readable. If anyone is ever maintaining this
     code when for..of loops become cross-browser compatible, please go
     through all of the YACS Javascript to replace things like
     for(var n=0; n<nodes.length; ++n) {
       var node = nodes[n];
       ...
     }
     with loops like
     for(var node of nodes) {
       ...
     }
  */
  
  // add "closed" class to sections with less than 1 seat
  var nodes = document.getElementsByTagName('section');
  for(var n=0; n<nodes.length; ++n) {
    var subnodes = nodes[n].getElementsByTagName('section-seats-available');
    // there should only be 1 <section-seats-available> child
    if(parseInt(subnodes[0].innerHTML, 10) < 1) {
      nodes[n].classList.add('closed');
    }
  }

  // add the actual "credit(s)" to credits elements, which only have the number
  nodes = document.getElementsByTagName('course-credits');
  for(var n=0; n<nodes.length; ++n) {
    var word = 'credits';
    if(parseInt(nodes[n].innerHTML, 10) === 1) { word = 'credit'; }
    nodes[n].innerHTML = nodes[n].innerHTML + ' ' + word;
  }

  // prepend the "Section" to section numbers
  nodes = document.getElementsByTagName('section-name');
  for(var n=0; n<nodes.length; ++n) {
    nodes[n].innerHTML = 'Section ' + nodes[n].innerHTML;
  }

  // append the " seats" to the available seats
  nodes = document.getElementsByTagName('section-seats-available');
  for(var n=0; n<nodes.length; ++n) {
    nodes[n].innerHTML += ' seats';
  }

  // period-day is represented as a number; translate it into a short day code
  nodes = document.getElementsByTagName('period-day');
  for(var n=0; n<nodes.length; ++n) {
    nodes[n].innerHTML =
      nsYacs.weekdayNames[parseInt(nodes[n].innerHTML, 10)].substring(0,3);
  }

  // for each period object, the period-start and period-end children are
  // represented in military time, so replace them with a period-time element
  // that formats them together as readable times
  nodes = document.getElementsByTagName('period');
  for(var n=0; n<nodes.length; ++n) {
    var ps = firstChildWithTag(nodes[n], 'period-start');
    var pe = firstChildWithTag(nodes[n], 'period-end');
    var startTime = milTimeToReadable(ps.innerHTML);
    var endTime = milTimeToReadable(pe.innerHTML);
    var pt = document.createElement('period-time');
    pt.innerHTML = startTime + '-' + endTime;
    ps.parentNode.insertBefore(pt, ps);
    ps.parentNode.removeChild(ps);
    pe.parentNode.removeChild(pe);
  }
}



/* ****************************************************************************
   Once a courses XML has been loaded into div#content, do any other steps
   needed to crunch it into presentable form. */
function setupCourses() {
  formatSearchResults();

  var nodes = document.getElementsByTagName('section');
  for(var i=0; i<nodes.length; ++i) {
    /* important to use let rather than var for any of these loops with
       an event handler inside them - let will define the variables at
       the scope of this loop (i.e. different instance per loop) which will
       prevent the common error of having every event handler refer to the
       same element. */
    let n = nodes[i];
    
    // mark any sections that are already in the selected array with .selected
    // class (used in revisiting pages)
    let sid = firstChildWithTag(n, 'section-id').innerHTML;
    if(nsUser.hasSelection(sid)) {
      n.className += ' selected';
    }

    // add click functionality to sections
    n.addEventListener('click', function(event) {
      // we care more about the data - so use that to determine how to change
      // the styling; i.e. if the id is in the array, we will always deselect
      // it regardless of whether it was being rendered as selected or not
      if(nsUser.removeSelection(sid)) {
	// index is real, section is selected, remove selected class
	n.classList.remove('selected');
      }
      else {
	// section is not selected, select it and add it to the array
	nsUser.addSelection(sid);
	n.className += ' selected';
      }
      
      // don't bubble up to the course click handler!
      event.stopPropagation();
    });
  }
  
  // courses can also be clicked
  // if a course is clicked:
  // if there are open, non-selected sections: select all open sections
  // else: deselect all selections
  
  $('course').click(function(event) {
    // we are guaranteed that the user clicked on the course and not a section
    var allSectionsSelected = true;
    var selections = nsUser.getSelections();
    $(this).find('section').each(function(i, section) {
      // ignore closed sections
      if(! $(section).hasClass('closed')) {
	var sid = $(section).find('section-id').html();
	// if a section id cannot be found in the selected array, they cannot
	// all be selected
	if(selections.indexOf(sid) < 0) {
	  allSectionsSelected = false;
	  return false; // break the .each() loop
	}
      }
    });

    $(this).find('section').each(function(i, section) {
      var sid = $(section).find('section-id').html();
      if(allSectionsSelected) {
      	nsUser.removeSelection(sid);
      	$(section).removeClass('selected');
      }
      else {
	// never add closed sections
	if(! $(this).hasClass('closed')) {
      	  nsUser.addSelection(sid);
      	  $(section).addClass('selected');
	}
      }
    });
  });
  History.pushState({state:nsYacs.courselistPage}, "Course page", "?state=1");
}



/* ****************************************************************************
   Main courses load function, that will be called when navigating to this page.
   Anything that has to be done when loading up the courses/search results.
   The string argument is the literal API request that will be made, unchanged.
   //If performing a search, you should call searchToQuery first.
*/
function loadCourses(apiString) {
  clearForNewPage();
  doAjaxRequest(apiString, function(response) {
    nsYacs.contentContainer.innerHTML = response;
    setupCourses();
    nsUser.currentPage = nsYacs.courselistPage;
  });
}
